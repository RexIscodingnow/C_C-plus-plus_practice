指標 (Pointer)
    
    ** 註: 變數 與 指標，不同處
            儲存資料
                (1) 變數: 資料型別 (ex: 1, 12.345, "hello world", ...)

                (2) 指標: 記憶體位址 (ex: int *p = new int;  p 記憶體位址 => 0x123)
            
            函式參數
                (1) 變數: "複製一份" 給被呼叫的函式

                (2) 指標: "記憶體位址" 傳給被呼叫的函式

    1. 宣告
        。 type * name;   // 未定義
        。 type * name = address;
        。 type * nameA, * nameB;   // 宣告多個指標
    
    2. 指派
        。 name = address  // address 是記憶體位址 (可想像成住家地址。想像在記憶體內，劃分一個一個的住宅，且每個住宅給一個"地址編號")
            存取指標
            將 " = " 右側的記憶體位址，指派給 " = " 左側的指標，
            指標便可以透過記憶體位址。管理該記憶體空間
        。 *name = value(variable);
            存取指標管理的記憶體
            " = " 右側指派給 左側的指標所管理的記憶體空間

    3. 取值
        。 name
            存取指標
            取得指標所管理的記憶體位址
        。 *name
            存取指標管理的記憶體
            取得指標所管理的記憶體中的值
    
    4. address
        。 &
            取得一個已存在的變數的 記憶體位址
        。 new
            配置指定型別的記憶體空間，並回傳該空間的記憶體位址
        。另一個指標
            將已存在的指標所儲存的記憶體位址，指派給另一個指標

    5. delete
        。 釋放記憶體位址
           用 new 配置給指標的記憶體可以用 delete 釋放

    6. const
        。 const type * name;
            特性:  宣告後，變數內的值 *不可以* 變動
        。 type * const name;
            特性: 1. 宣告後，變數內的值 *可以* 變動
                  2. 使用 delete variable_name 後，不可再重新指派
                        example: 
                            1 |  int * const m = new int;   // 假設指標 m 的記憶體位址 => 0x123
                            2 |  *m = 100;
                            3 |  *m += 1;   // 變數 m 的記憶體空間內的值，是 101 (*m = 101)
                            4 |  delete m;
                            5 |  // m = new int;   // 不可以再重新指派

    7. 指標參數
            以指標為參數
                。 pass by pointer
                。 1. 函式參數   =>  1 |  void passByPointer(int *p) {......}
                。 2. 函式返回值型別為指標
                        =>  1 |  int *getAddress() {
                            2 |      int *p = new int;
                            3 |      *p = 5120;
                            4 |      return p;
                            5 |  }

    8. return 型別為指標
        。 呼叫敘述是一個記憶體位址 (函式執行區一路到 return)
        。 ** 不應 return 區域變數的記憶體位址 **
            說明: 在該返回值是 指標型別 的函式，在函式內 宣告指標 並當返回值，這是 "合法" 的。
                        =>  1 |  int *var_address() {
                            2 |      int *var = new int;
                            3 |      *var = 458120;
                            4 |      return var;
                            5 |  }
                    反之，若是在函式內宣告一般變數 (**註: 區域變數)，再使用 & 符號取得 記憶體位址，
                               會編譯錯誤! 因為這是 "不合法" 的語法!!
                        =>  1 |  int *var_address() {
                            2 |      int var;
                            3 |      var = 4645315;
                            4 |      return &var;
                            5 |  }

        。 可以宣告為 const

    9. 動態陣列
        。 用 new 關鍵字來配置記憶體空間
        。 可以 delete

    10. 陣列參數
        。 型別可以用 * 取代 []
    
    11. 指標的指標
        。 宣告  type **name;
        。 存取值 **name
    
    12. void *
        。 指派
            **註: 可以是任意型別的指標
        。 轉型 (casting)
            **註: 在取值前，要先轉換成指派過來的型別

    13. 指標的陣列
        。 宣告
                1 | int *array[10];
                2 | 
                3 | for (int i = 0; i < 10; i++) {
                4 |     array[i] = new int;
                5 |     *array[i] = i + 1;
                6 | }

        。 存取值
                1 | // 上述宣告的 int *array[10];
                2 | // 作存取值
                3 | 
                4 | for (int i = 0; i < 10; i++) {
                5 |     cout<<*array[i]<<endl;
                6 | }

        。 與 int *array; 的不同之處